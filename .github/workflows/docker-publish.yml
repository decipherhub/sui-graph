name: docker_publish

on:
  push:
    branches:
      - 'main'
    tags:
      - '*'

permissions:
  contents: write
  packages: read
  security-events: write

jobs:
  go_lint_test:
    name: Go Lint & Test
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libzmq3-dev

      - name: Run Lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60.2
          args: --timeout=10m

      - name: Run Unit Tests
        run: make test

      - name: Run Integration Tests
        run: make test-e2e

      - name: Run Gosec
        uses: securego/gosec@master
        with:
          args: "-exclude-generated -exclude-dir=e2etest -exclude-dir=testutil ./..."

  docker_build:
    name: Docker Build & Publish
    needs: go_lint_test
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Dockerfile Linting
        uses: hadolint/hadolint-action@v3.1.0
        with:
          output-file: hadolint-result.sarif
          format: sarif
          no-fail: true
          dockerfile: Dockerfile

      - name: Upload Dockerfile linting results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-result.sarif

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.AWS_ECR_REGISTRY_ID }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and push image to Docker Hub and ECR
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ vars.DOCKERHUB_REGISTRY_ID }}/$(echo ${{ github.repository }} | cut -d '/' -f 2):${{ github.ref_name }}
            ${{ vars.AWS_ECR_REGISTRY_ID }}/$(echo ${{ github.repository }} | cut -d '/' -f 2):${{ github.ref_name }}

      - name: Inspect Docker Image
        run: |
          docker buildx imagetools inspect ${{ vars.DOCKERHUB_REGISTRY_ID }}/$(echo ${{ github.repository }} | cut -d '/' -f 2):${{ github.ref_name }}

  vulnerability_scan:
    name: Trivy Vulnerability Scan
    needs: docker_build
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create Trivy config
        run: |
          cat <<EOF > /tmp/trivy.yaml
          format: sarif
          output: trivy-results.sarif
          vulnerability:
            ignore-unfixed: true
            type:
              - os
              - library
          severity:
            - CRITICAL
            - HIGH
            - MEDIUM
          db:
            repository: index.docker.io/aquasec/trivy-db:2
          EOF

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: "${{ vars.DOCKERHUB_REGISTRY_ID }}/$(echo ${{ github.repository }} | cut -d '/' -f 2):${{ github.ref_name }}"
          trivy-config: /tmp/trivy.yaml
        env:
          TRIVY_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          TRIVY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'